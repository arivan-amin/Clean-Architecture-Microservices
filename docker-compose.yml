volumes:
  app-logs:
  mysql-data:
  mongo-data:
  redis-data:

services:
  discovery-server:
    container_name: discovery-server
    restart: unless-stopped
    image: arivanamin/healthcare-discovery-server
    ports:
      - "8761:8761"
    env_file:
      - .env
    volumes:
      - app-logs:/root/Apps/Healthcare/Logs/

  api-gateway:
    container_name: api-gateway
    restart: unless-stopped
    image: arivanamin/healthcare-api-gateway
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - app-logs:/root/Apps/Healthcare/Logs/
    depends_on:
      - discovery-server
      - redis

  tempo:
    container_name: tempo
    restart: unless-stopped
    image: grafana/tempo:2.3.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./Docker/tempo/tempo.yml:/etc/tempo.yaml:ro
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin

  loki:
    container_name: loki
    restart: unless-stopped
    image: grafana/loki:3.2.0
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

  promtail:
    container_name: promtail
    restart: unless-stopped
    image: grafana/promtail:3.2.0
    volumes:
      - ./Docker/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - app-logs:/logs
      - ${HOME}/Apps/Healthcare/Logs:/local-logs
    command: -config.file=/etc/promtail/config.yml

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:v2.54.1
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./Docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:11.2.0
    volumes:
      - ./Docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
  
  mysql:
    container_name: mysql
    restart: unless-stopped
    image: mysql:9.1.0
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./Docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  mongo:
    container_name: mongo
    restart: unless-stopped
    image: mongo:8.0.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongo
  
  mongo-express:
    container_name: mongo-express
    restart: unless-stopped
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo
      ME_CONFIG_MONGODB_SERVER: healthcare-mongo
      ME_CONFIG_MONGODB_PORT: 27017
      # Mongo Express UI Credentials
      ME_CONFIG_BASICAUTH_USERNAME: express
      ME_CONFIG_BASICAUTH_PASSWORD: healthcare
    depends_on:
      - mongo

  redis:
    container_name: redis-server
    restart: unless-stopped
    image: redis:7.4.2
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis-data:/data

  # KeyCloak
  keycloak-mysql:
    container_name: keycloak-mysql
    restart: unless-stopped
    image: mysql:9.1.0
    #    volumes:
    #      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
  
  keycloak:
    container_name: keycloak
    restart: unless-stopped
    image: keycloak/keycloak:26.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: Admin@pass123
    ports:
      - "8181:8080"
    volumes:
      - ./Docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  # Kafka
  zookeeper:
    container_name: zookeeper
    restart: unless-stopped
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    container_name: broker
    restart: unless-stopped
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    container_name: schema-registry
    restart: unless-stopped
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    restart: unless-stopped
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
