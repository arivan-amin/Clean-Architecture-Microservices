volumes:
  app-logs:
  mysql-data:
  redis-data:
  kafka-data:

x-base-service: &base-service
  restart: unless-stopped
  env_file:
    - .env
  volumes:
    - app-logs:/root/Apps/Spring-Clean-Microservices/Logs/
  depends_on:
    - discovery-server

services:
  discovery-server:
    <<: *base-service
    container_name: Discovery-Server
    image: arivanamin/scm-discovery-server
    ports:
      - "8761:8761"
    depends_on: [ ]

  api-gateway:
    <<: *base-service
    container_name: API-Gateway
    image: arivanamin/scm-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - redis

  tempo:
    container_name: Tempo
    restart: unless-stopped
    image: grafana/tempo:2.7.2
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./Docker/tempo/tempo.yml:/etc/tempo.yaml:ro
    ports:
      - "3110:3100"

  loki:
    container_name: Loki
    restart: unless-stopped
    image: grafana/loki:3.4.3
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

  promtail:
    container_name: Promtail
    restart: unless-stopped
    image: grafana/promtail:3.4.3
    volumes:
      - ./Docker/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - app-logs:/logs
      - ${HOME}/Apps/Spring-Clean-Microservices/Logs:/local-logs
    command: -config.file=/etc/promtail/config.yml

  prometheus:
    container_name: Prometheus
    restart: unless-stopped
    image: prom/prometheus:v3.2.1
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./Docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    container_name: Grafana
    restart: unless-stopped
    image: grafana/grafana:11.6.0
    volumes:
      - ./Docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
  
  mysql:
    container_name: MySQL
    restart: unless-stopped
    image: mysql:9.2.0
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./Docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql

  phpmyadmin:
    container_name: Phpmyadmin
    restart: unless-stopped
    image: phpmyadmin/phpmyadmin:5.2.2
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: mysql
    ports:
      - "9797:80"
    depends_on:
      - mysql

  redis:
    container_name: Redis-server
    restart: unless-stopped
    image: redis:7.4.2
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis-data:/data

  kafka:
    container_name: Kafka
    restart: unless-stopped
    image: 'bitnami/kafka:4.0.0'
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9094,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  ### Uncomment below if you want to start all services through docker compose 
#  patient-service:
#    <<: *base-service
#    container_name: Patient-Service
#    image: arivanamin/scm-patient-service
#
#  audit-service:
#    <<: *base-service
#    container_name: Audit-Service
#    image: arivanamin/scm-audit-service
#    
#  sso-service:
#    <<: *base-service
#    container_name: SSO-Service
#    image: arivanamin/scm-sso-service
