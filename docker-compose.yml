volumes:
  app-logs:
  mysql-data:
  mongo-data:
  redis-data:
  kafka-data:

services:
  discovery-server:
    container_name: discovery-server
    restart: unless-stopped
    image: arivanamin/healthcare-discovery-server
    ports:
      - "8761:8761"
    env_file:
      - .env
    volumes:
      - app-logs:/root/Apps/Healthcare/Logs/

  api-gateway:
    container_name: api-gateway
    restart: unless-stopped
    image: arivanamin/healthcare-api-gateway
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - app-logs:/root/Apps/Healthcare/Logs/
    depends_on:
      - discovery-server
      - redis

  tempo:
    container_name: tempo
    restart: unless-stopped
    image: grafana/tempo:2.7.2
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./Docker/tempo/tempo.yml:/etc/tempo.yaml:ro
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin

  loki:
    container_name: loki
    restart: unless-stopped
    image: grafana/loki:3.4.3
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

  promtail:
    container_name: promtail
    restart: unless-stopped
    image: grafana/promtail:3.4.3
    volumes:
      - ./Docker/promtail/promtail-config.yaml:/etc/promtail/config.yml
      - app-logs:/logs
      - ${HOME}/Apps/Healthcare/Logs:/local-logs
    command: -config.file=/etc/promtail/config.yml

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:v3.2.1
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./Docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:11.6.0
    volumes:
      - ./Docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
  
  mysql:
    container_name: mysql
    restart: unless-stopped
    image: mysql:9.2.0
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./Docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  mongo:
    container_name: mongo
    restart: unless-stopped
    image: mongo:8.0.6
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongo

  redis:
    container_name: redis-server
    restart: unless-stopped
    image: redis:7.4.2
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis-data:/data

  # KeyCloak
  #  keycloak-mysql:
  #    container_name: keycloak-mysql
  #    restart: unless-stopped
  #    image: mysql:9.2.0
  #    #    volumes:
  #    #      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
  #    environment:
  #      MYSQL_ROOT_PASSWORD: root
  #      MYSQL_DATABASE: keycloak
  #      MYSQL_USER: keycloak
  #      MYSQL_PASSWORD: password
  #  
  #  keycloak:
  #    container_name: keycloak
  #    restart: unless-stopped
  #    image: keycloak/keycloak:26.1.4
  #    command: [ "start-dev", "--import-realm" ]
  #    environment:
  #      DB_VENDOR: MYSQL
  #      DB_ADDR: mysql
  #      DB_DATABASE: keycloak
  #      DB_USER: keycloak
  #      DB_PASSWORD: password
  #      KEYCLOAK_ADMIN: admin
  #      KEYCLOAK_ADMIN_PASSWORD: Admin@pass123
  #    ports:
  #      - "8181:8080"
  #    volumes:
  #      - ./Docker/keycloak/realms/:/opt/keycloak/data/import/
  #    depends_on:
  #      - keycloak-mysql

  # Kafka
  kafka:
    container_name: kafka
    restart: unless-stopped
    image: confluentinc/cp-kafka:7.9.0
    ports:
      - "9092:9092" # For localhost access
      - "29092:29092" # For internal docker use
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      CLUSTER_ID: 'db505f3e-6f2a-43e2-ab7d-f29cc04ce30f'
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    volumes:
      - kafka-data:/var/lib/kafka

  schema-registry:
    container_name: schema-registry
    restart: unless-stopped
    image: confluentinc/cp-schema-registry:7.9.0
    depends_on:
      - kafka
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
